{"version":3,"sources":["logic/maze/Random.js","logic/AlgorithmManager.js","logic/maze/Prim.js","logic/maze/DFS.js","logic/solvers/BFS.js","logic/solvers/DFS.js","logic/solvers/Dijkstra.js","logic/redux/initialState.js","logic/GraphLogic.js","logic/redux/reducers/graphReducer.js","logic/redux/reducers/controlReducers.js","logic/redux/reducers/algorithmReducers.js","logic/redux/graphSlice.js","components/TopMenu/SolveControl.js","components/TopMenu/GeneratorControl.js","components/TopMenu/ControlsMenu.js","components/TopMenu/TopMenu.js","components/GraphArea/Tile.js","components/GraphArea/GraphArea.js","components/LegendArea/Legend.js","App.js","logic/redux/store.js","index.js"],"names":["generators","graphData","generationData","start","goal","vertices","walls","firstRun","queue","running","extraParams","weighted","deltaWalls","deltaHoles","forEach","v","data","value","Math","floor","random","push","length","undefined","leftOuts","filter","n","neighbors","reduce","res","n2","includes","sort","a","b","l","pop","tmp","currentNode","nodeNeighbors","neighbor","secondNeighbor","cornerNeighbors","Random","DFS","filteredNeighbors","currentHead","shift","solvers","BFS","graphState","edges","visited","parentDict","tmpQueue","currentVertex","goalNode","indexOf","updatedQueue","Dijkstra","node","baseValue","addedValue","getMazeGenerators","names","getSolverNames","selectedTile","weightCheck","skip","clean","drawPath","solveSpeed","paused","intervalId","solve","generate","algorithms","solveArr","generateGraph","nx","ny","r","c","id","removeEdge","e","restoreEdge","clear","state","type","selectTile","action","payload","replace","toggleWall","oldId","startsWith","console","log","placeNode","oldVal","updateGraph","Object","keys","newData","pause","reset","clearInterval","toggleSkip","resume","updateSpeed","setIntervalId","setAlgorithm","algorithmDict","generateMaze","f","w","step","pathTile","current","graphSlice","createSlice","name","initialState","reducers","graphReducer","controlReducer","algoReducer","actions","setWeightCheck","SolveControl","props","selectedSolver","useSelector","graph","runSpeed","runSolver","runGenerator","oldTimeout","dispatch","useDispatch","delay","setInterval","solveHelper","className","FormControl","variant","InputLabel","Select","disabled","label","onChange","target","map","MenuItem","key","Button","color","startIcon","onClick","currentGenerator","isWeighted","generateHelper","FormControlLabel","control","Checkbox","checked","icon","Typography","gutterBottom","Slider","onChangeCommitted","defaultValue","min","max","aria-labelledby","valueLabelDisplay","valueLabelFormat","marks","getCurrentCSS","cls","Tile","cellState","oldData","styles","width","height","style","onMouseEnter","buttons","onPointerDown","GraphArea","updateSizes","graphArea","document","getElementById","graphW","clientWidth","graphH","clientHeight","columns","TILE","rows","tileW","tileH","setState","onLoad","getTiles","tiles","cells","this","onContextMenu","preventDefault","Component","connect","vertex","App","configureStore","reducer","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.1259e794.chunk.js","sourcesContent":["const DENSENESS = 0.72; //will change the denseness of the maze\r\n\r\nexport default function (graphData, generationData) {\r\n  let { start, goal, vertices } = graphData;\r\n  let deltaWalls = [],\r\n    deltaHoles = [];\r\n  vertices.forEach((v) => {\r\n    if (Math.random() > DENSENESS && v !== start && v !== goal) deltaWalls.push(v);\r\n  });\r\n  return { running: false, deltaHoles, deltaWalls, generationData };\r\n}\r\n","import BFS from \"./solvers/BFS\";\r\nimport DFS from \"./solvers/DFS\";\r\nimport Random from \"./maze/Random\";\r\nimport DFSGenerate from \"./maze/DFS\";\r\nimport Prim from \"./maze/Prim\";\r\nimport Dijkstra from \"./solvers/Dijkstra\";\r\n// import Recursive from \"./maze/Recursive\";\r\n\r\nconst generators = {\r\n  \"Prim's\": Prim,\r\n  Random,\r\n  DFS: DFSGenerate,\r\n  //TODO: Recursive\r\n};\r\n\r\nconst solvers = {\r\n  BFS,\r\n  DFS,\r\n  Dijkstra,\r\n  //TODO: A*\r\n};\r\n\r\nfunction getMazeGenerators() {\r\n  let names = [];\r\n  for (let n in generators) names.push(n);\r\n  return names;\r\n}\r\n\r\nfunction getSolverNames() {\r\n  let names = [];\r\n  for (let n in solvers) names.push(n);\r\n  return names;\r\n}\r\n\r\nexport { getMazeGenerators, getSolverNames, solvers, generators };\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running, extraParams, weighted } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //Fill all the maze with walls\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) {\r\n        if (!weighted) graphData.data[v].value = Math.floor(Math.random() * 100); //better than just selecting random queue\r\n        deltaWalls.push(v);\r\n      }\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start]; //start from the start node\r\n  } else {\r\n    if (queue.length === 0) {\r\n      //if the queue is empty check there is no unreachable walls (maze looks cleaner like this)\r\n      //FIXME: if someone cuts off a section in the middle of the generation, it will be emptied out\r\n      //* Could disable option to toggle walls in the middle of the generation\r\n      if (extraParams.leftOuts === undefined) {\r\n        let leftOuts = walls.filter((n) => graphData.data[n].neighbors.reduce((res, n2) => res && walls.includes(n2), true));\r\n        leftOuts.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n        extraParams = { leftOuts };\r\n      }\r\n      // add the unreachable walls with an extra hole\r\n      let { leftOuts } = extraParams;\r\n      if (leftOuts !== undefined && leftOuts.length !== 0) {\r\n        let l = leftOuts.pop();\r\n        queue.push(l);\r\n        let tmp = graphData.data[l].neighbors.filter((n) => walls.includes(n) && !queue.includes(n)); //possible extra holes\r\n        if (tmp.length > 0) queue.push(tmp[Math.floor(Math.random() * tmp.length)]);\r\n        extraParams = { leftOuts };\r\n      } else return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n    }\r\n\r\n    let currentNode = queue.pop();\r\n    let nodeNeighbors = graphData.data[currentNode].neighbors;\r\n\r\n    //filter out nodes, keeps the maze clean\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) => !queue.includes(neighbor) && walls.includes(neighbor));\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) =>\r\n      graphData.data[neighbor].neighbors.reduce((res, secondNeighbor) => {\r\n        if (secondNeighbor === goal) return true;\r\n        if (secondNeighbor === currentNode) return res; //skip the father node\r\n        if (queue.includes(secondNeighbor) || !walls.includes(secondNeighbor)) return false; //if it has a neighbor who is in queue or a wall - don't add it\r\n        let cornerNeighbors = graphData.data[secondNeighbor].cornerNeighbors;\r\n        let filteredCorners = cornerNeighbors.filter((n) => !walls.includes(n));\r\n        if (filteredCorners.length > 1) return false;\r\n        return res;\r\n      }, true)\r\n    );\r\n    //\r\n    //add to queue\r\n    generationData.queue = [...queue.filter((n) => n !== currentNode), ...nodeNeighbors];\r\n    generationData.queue.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n\r\n    //make a hole\r\n    deltaHoles = [...deltaHoles, currentNode];\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData, extraParams };\r\n}\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //first init on the first run\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) deltaWalls.push(v);\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start];\r\n  } else {\r\n    let neighbors, filteredNeighbors, currentHead;\r\n    do {\r\n      //loop until you get valid queued cell\r\n\r\n      //at the end of the run, stop\r\n      if (queue.length === 0) return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n\r\n      //get the last cell inserted\r\n      currentHead = queue.shift();\r\n      neighbors = graphData.data[currentHead].neighbors;\r\n      filteredNeighbors = neighbors.filter((n) => walls.includes(n));\r\n    } while (neighbors.length - filteredNeighbors.length > 1 && !neighbors.includes(goal));\r\n\r\n    neighbors.sort((a, b) => 0.75 - Math.random()); //randomize the DFS but not too much\r\n    queue = [...neighbors, ...queue.filter((n) => !neighbors.includes(n))];\r\n    deltaHoles = [...deltaHoles, currentHead];\r\n    generationData = { ...generationData, queue };\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData };\r\n}\r\n","export default function BFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let tmpQueue = [...queue]; // every step will include all the level nodes\r\n  queue = [];\r\n\r\n  while (tmpQueue.length > 0) {\r\n    //this loop is to make the BFS work layer-layer instead of node-node\r\n    let currentVertex = tmpQueue.pop(); //get the next one (fifo)\r\n\r\n    let neighbors = edges[currentVertex];\r\n\r\n    neighbors = neighbors.filter((v) => !visited.includes(v) && !queue.includes(v)).sort((a, b) => a - b); // get and sort the relevant neighbors\r\n    neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n    queue = [...neighbors, ...queue]; //get next nodes\r\n    visited.push(currentVertex);\r\n    if (neighbors.includes(goal)) {\r\n      let goalNode = neighbors[neighbors.indexOf(goal)];\r\n      parentDict[goalNode] = currentVertex;\r\n      running = false;\r\n    }\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","export default function DFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return { ...graphState, running: false }; // if no path\r\n  let currentVertex = queue.shift(); //get the next one (lifo)\r\n\r\n  let neighbors = edges[currentVertex];\r\n  neighbors = neighbors.filter((v) => !visited.includes(v));\r\n  let updatedQueue = neighbors.filter((v) => queue.includes(v));\r\n  if (updatedQueue.length > 0) queue = queue.filter((v) => !updatedQueue.includes(v)); //make room for the updated nodes\r\n  neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n\r\n  queue = [...neighbors, ...queue];\r\n  visited.push(currentVertex);\r\n  if (neighbors.includes(goal)) {\r\n    let goalNode = neighbors[neighbors.indexOf(goal)];\r\n    parentDict[goalNode] = currentVertex;\r\n    running = false;\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","\r\nexport default function (graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal, extraParams, data } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let currentNode = queue.shift();\r\n\r\n  if (currentNode === goal) return { ...graphState, running: false };\r\n  visited.push(currentNode);\r\n  let nodeNeighbors = edges[currentNode];\r\n  //update the distance\r\n  nodeNeighbors.forEach((node) => {\r\n    if (visited.includes(node)) return;\r\n    let baseValue = extraParams[currentNode] | data[currentNode].value; //current node value\r\n    let addedValue = data[node].value; //target node value\r\n    if (extraParams[node] === undefined || extraParams[node] > baseValue + addedValue) {\r\n      //if the value is the smallest make the current node his parent\r\n      parentDict[node] = currentNode;\r\n      extraParams[node] = baseValue + addedValue;\r\n    }\r\n  });\r\n\r\n  //add to queue if not in the queue\r\n  nodeNeighbors.forEach((node) => {\r\n    if (visited.includes(node)) return;\r\n    if (!queue.includes(node)) queue.push(node);\r\n  });\r\n  queue.sort((a, b) => extraParams[a] - extraParams[b]);\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","import { getSolverNames, getMazeGenerators } from \"../AlgorithmManager\";\r\n\r\nexport default {\r\n  selectedTile: undefined,\r\n  weightCheck: false,\r\n  skip: false,\r\n  graphData: {\r\n    clean: true,\r\n    vertices: [],\r\n    edges: [],\r\n    data: {},\r\n    parentDict: {},\r\n    visited: [],\r\n    queue: [],\r\n    drawPath: false,\r\n    goal: -1,\r\n    start: -1,\r\n    running: false,\r\n    walls: [],\r\n    extraParams: {},\r\n  },\r\n  generationData: {\r\n    weighted: false,\r\n    running: false,\r\n    queue: [],\r\n    firstRun: true,\r\n    extraParams: {},\r\n  },\r\n  solveSpeed: 60,\r\n  paused: false,\r\n  intervalId: {\r\n    solve: undefined,\r\n    generate: undefined,\r\n  },\r\n  algorithms: {\r\n    solve: getSolverNames()[0],\r\n    generate: getMazeGenerators()[0],\r\n    solveArr: getSolverNames(),\r\n  },\r\n};\r\n","export const MAX_COST = 100;\r\nfunction generateGraph(nx, ny) {\r\n  //generate the graph data structure\r\n  let vertices = [];\r\n  let edges = {};\r\n  for (let r = 0; r < ny; r++)\r\n    for (let c = 0; c < nx; c++) {\r\n      let id = nx * r + c;\r\n      vertices.push(id); //Add ID first\r\n      if (edges[id] === undefined) edges[id] = [];\r\n      if (id - 1 >= 0 && (id - 1) % nx <= id % nx) {\r\n        edges[id].push(id - 1);\r\n        edges[id - 1].push(id);\r\n      }\r\n      if (id - nx >= 0) {\r\n        edges[id].push(id - nx);\r\n        edges[id - nx].push(id);\r\n      }\r\n    }\r\n\r\n  return { vertices, edges };\r\n}\r\n\r\nconst removeEdge = (e, node) => {\r\n  //remove an edge and update the relevant edges\r\n  let edges = { ...e };\r\n  let neighbors = edges[node];\r\n  neighbors.forEach((n) => {\r\n    edges[n] = edges[n].filter((v) => v !== node);\r\n  });\r\n  edges[node] = [];\r\n  return edges;\r\n};\r\n\r\nconst restoreEdge = (e, neighbors, walls, node) => {\r\n  //restore an edge and update the relevant edges\r\n  let edges = { ...e };\r\n  neighbors.forEach((n) => {\r\n    if (!walls.includes(n)) edges[n] = [...edges[n], node];\r\n  });\r\n  edges[node] = [...neighbors.filter((n) => !walls.includes(n))];\r\n  return edges;\r\n};\r\n\r\nexport { generateGraph, removeEdge, restoreEdge };\r\n","import { restoreEdge, removeEdge, MAX_COST } from \"../../GraphLogic\";\r\n\r\n/*\r\n    All graph manipulation related reducers\r\n*/\r\n\r\nexport default {\r\n  clear: (state) => {\r\n    state.weightCheck = false;\r\n    state.generationData.weighted = false;\r\n    state.graphData.walls = [];\r\n    state.graphData.vertices.forEach((v) => {\r\n      state.graphData.edges[v] = state.graphData.data[v].neighbors;\r\n      state.graphData.data[v].value = -1;\r\n      if (state.graphData.data[v].type !== \"start\" && state.graphData.data[v].type !== \"goal\") state.graphData.data[v].type = \"\";\r\n    });\r\n  },\r\n\r\n  selectTile: (state, action) => {\r\n    if (state.graphData.running || state.generationData.running) return;\r\n    let id = action.payload;\r\n    if (state.selectedTile !== undefined) {\r\n      state.graphData.data[state.selectedTile].type = state.graphData.data[state.selectedTile].type.replace(\"-s\", \"\");\r\n      state.selectedTile = undefined;\r\n    }\r\n    if (id === state.graphData.start) state.graphData.data[action.payload].type = \"start-s\";\r\n    else state.graphData.data[action.payload].type = \"goal-s\";\r\n    state.selectedTile = id;\r\n  },\r\n\r\n  toggleWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    let id = action.payload;\r\n    if (type === \"wall\") {\r\n      state.graphData.data[id].type = \"\";\r\n      state.graphData = {\r\n        ...state.graphData,\r\n        walls: state.graphData.walls.filter((v) => v !== id),\r\n        edges: { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, id) },\r\n      };\r\n      if (state.graphData.walls.length === 0) state.graphData.clean = true;\r\n      //\r\n      //\r\n    } else if (!type.startsWith(\"start\") && !type.startsWith(\"goal\") && state.selectedTile === undefined) {\r\n      state.graphData.walls.push(id);\r\n      state.graphData = { ...state.graphData, clean: false, edges: { ...removeEdge(state.graphData.edges, id) } };\r\n      state.graphData.data[id].type = \"wall\";\r\n    }\r\n\r\n    //Change start/end node\r\n    if (state.selectedTile !== undefined) {\r\n      let type, oldId;\r\n      console.log(state.selectedTile);\r\n      if (state.selectedTile === state.graphData.start) {\r\n        oldId = state.graphData.start;\r\n        console.log(oldId, id);\r\n        state.graphData.start = id;\r\n        type = \"start\";\r\n      } else {\r\n        oldId = state.graphData.goal;\r\n        state.graphData.goal = id;\r\n        type = \"goal\";\r\n      }\r\n      state.graphData.data[oldId] = { ...state.graphData.data[oldId], type: \"\", value: Math.floor(MAX_COST * Math.random()) };\r\n      state.graphData.data[id] = { ...state.graphData.data[id], type, value: 0 };\r\n      state.selectedTile = undefined;\r\n    }\r\n  },\r\n\r\n  placeNode: (state, action) => {\r\n    let { type, id } = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData[type] = id;\r\n    state.graphData.data[id] = { ...oldVal, type };\r\n  },\r\n\r\n  updateGraph: (state, action) => {\r\n    let { vertices, edges } = action.payload;\r\n    state.graphData.vertices = vertices;\r\n\r\n    //init vertices\r\n    state.graphData.edges = edges;\r\n    vertices.forEach((v) => {\r\n      if (state.graphData.data[v] === undefined) state.graphData.data[v] = { type: \"\", neighbors: edges[v], value: -1 };\r\n    });\r\n\r\n    vertices.forEach((v) => {\r\n      let cornerNeighbors = state.graphData.data[v].neighbors\r\n        .reduce((res, n) => [...res, ...state.graphData.data[n].neighbors], [])\r\n        .sort();\r\n\r\n      //count duplicates\r\n      cornerNeighbors = cornerNeighbors.reduce((res, n) => {\r\n        res[n] = (res[n] || 0) + 1;\r\n        return res;\r\n      }, {});\r\n\r\n      //map to array all 2 duplicates\r\n      cornerNeighbors = Object.keys(cornerNeighbors).reduce((res, n) => {\r\n        if (cornerNeighbors[n] === 2 && n !== v) res = [...res, n * 1];\r\n        return res;\r\n      }, []);\r\n      let newData = { ...state.graphData.data[v], cornerNeighbors };\r\n      state.graphData.data[v] = newData;\r\n    });\r\n  },\r\n};\r\n","/*\r\n    All control related reducers \r\n*/\r\n\r\nexport default {\r\n  pause: (state) => {\r\n    state.paused = true;\r\n  },\r\n  reset: (state) => {\r\n    console.log(\"reset\");\r\n    if (state.selectedTile !== undefined) {\r\n      state.graphData.data[state.selectedTile].type = state.graphData.data[state.selectedTile].type.replace(\"-s\", \"\");\r\n      state.selectedTile = undefined;\r\n    }\r\n\r\n    if (!state.graphData.clean) {\r\n      state.graphData.vertices.forEach((v) => {\r\n        //Loop over visited & path\r\n        let { type } = state.graphData.data[v];\r\n        if (!state.generationData.weighted) state.graphData.data[v].value = 0;\r\n        if (type !== \"start\" && type !== \"goal\" && type !== \"wall\")\r\n          state.graphData.data[v] = { ...state.graphData.data[v], type: \"\" };\r\n      });\r\n    }\r\n    clearInterval(state.intervalId.solve);\r\n    clearInterval(state.intervalId.generate);\r\n    state.intervalId = {\r\n      solve: undefined,\r\n      generate: undefined,\r\n    };\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      clean: true,\r\n      running: false,\r\n      drawPath: false,\r\n      queue: [state.graphData.start],\r\n      visited: [],\r\n      parentDict: {},\r\n    };\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      running: false,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    };\r\n    state.paused = false;\r\n  },\r\n\r\n  toggleSkip: (state) => {\r\n    state.skip = !state.skip;\r\n  },\r\n\r\n  resume: (state) => {\r\n    state.paused = false;\r\n  },\r\n\r\n  updateSpeed: (state, action) => {\r\n    state.solveSpeed = action.payload;\r\n  },\r\n\r\n  solve: (state) => {\r\n    // state.graphData.clean = false;\r\n    state.generationData.running = false;\r\n    // state.graphData.running = true;\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      clean: false,\r\n      running: true,\r\n      extraParams: {},\r\n    };\r\n  },\r\n\r\n  generate: (state, action) => {\r\n    state.generationData.weighted = action.payload;\r\n    state.weightCheck = action.payload;\r\n    state.graphData.clean = false;\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      extraParams: {},\r\n      running: true,\r\n      firstRun: true,\r\n      queue: [state.graphData.start],\r\n    };\r\n  },\r\n\r\n  setIntervalId: (state, action) => {\r\n    let { type, value } = action.payload;\r\n    console.log(\"Set interval - \", type, value);\r\n    state.intervalId[type] = value;\r\n  },\r\n};\r\n","import { restoreEdge, removeEdge, MAX_COST } from \"../../GraphLogic\";\r\nimport { solvers, generators } from \"../../AlgorithmManager\";\r\n/*\r\n    All algorithms related reducers,\r\n    meaning solvers and maze generators\r\n*/\r\n\r\nexport default {\r\n  setAlgorithm: (state, action) => {\r\n    let { value, type } = action.payload;\r\n    let algorithmDict;\r\n    switch (type) {\r\n      case \"solve\":\r\n        algorithmDict = solvers;\r\n        break;\r\n      default:\r\n        algorithmDict = generators;\r\n    }\r\n    if (algorithmDict[value] !== undefined) state.algorithms[type] = value;\r\n  },\r\n\r\n  generateMaze: (state) => {\r\n    if (state.paused) return;\r\n    //loop for not animating the building process\r\n    do {\r\n      if (state.generationData.weighted && state.generationData.firstRun)\r\n        //Generate random weights for nodes\r\n        state.graphData.vertices.forEach((v) => {\r\n          if (v !== state.graphData.start && v !== state.graphData.goal) {\r\n            state.graphData.data[v].value = Math.floor(Math.random() * MAX_COST); //better than just selecting random queue\r\n          } else {\r\n            state.graphData.data[v].value = 0;\r\n          }\r\n        });\r\n\r\n      //Make one step in the generation process\r\n      let f = generators[state.algorithms.generate];\r\n      let { deltaWalls, deltaHoles, running, generationData, extraParams } = f(state.graphData, state.generationData);\r\n\r\n      //filter out the walls if needed (for Prim ,DFS and etc.)\r\n      state.graphData.walls = [...state.graphData.walls.filter((v) => !deltaHoles.includes(v)), ...deltaWalls];\r\n\r\n      deltaWalls.forEach((w) => {\r\n        if (w === state.graphData.start || w === state.graphData.goal) return;\r\n        state.graphData.data[w].type = \"wall\";\r\n        state.graphData.edges = { ...removeEdge(state.graphData.edges, w) };\r\n      });\r\n\r\n      deltaHoles.forEach((n) => {\r\n        if (n === state.graphData.start || n === state.graphData.goal) return;\r\n\r\n        state.graphData.data[n].type = \"\";\r\n        state.graphData.edges = {\r\n          ...restoreEdge(state.graphData.edges, state.graphData.data[n].neighbors, state.graphData.walls, n),\r\n        };\r\n      });\r\n      state.generationData = { ...generationData, running, extraParams };\r\n    } while (state.skip && state.generationData.running);\r\n  },\r\n\r\n  step: (state) => {\r\n    if (state.paused) return;\r\n    do {\r\n      if (state.graphData.queue.length === 0) state.graphData.running = false;\r\n      //draw path at the end\r\n      if (state.graphData.drawPath) {\r\n        if (state.graphData.queue.length > 0) {\r\n          let pathTile = state.graphData.queue.pop();\r\n          if (state.graphData.data[pathTile].type === \"visited\") state.graphData.data[pathTile].type = \"path\";\r\n        } else return;\r\n        if (state.skip) continue;\r\n        return;\r\n      }\r\n      let f = solvers[state.algorithms.solve];\r\n      let res = f(state.graphData);\r\n\r\n      if (!res.running) res = { ...res, running: true, drawPath: true };\r\n      state.graphData = { ...state.graphData, ...res };\r\n\r\n      // when search is finished\r\n      if (res.drawPath) {\r\n        state.graphData.queue = []; //empty it and it will be repurposed for the path\r\n        if (state.graphData.goal !== -1 && state.graphData.parentDict[state.graphData.goal] !== undefined) {\r\n          let current = state.graphData.goal;\r\n          while (state.graphData.parentDict[current] !== undefined) {\r\n            state.graphData.queue = [...state.graphData.queue, current];\r\n            current = state.graphData.parentDict[current];\r\n          }\r\n        }\r\n      }\r\n      //change each cell type to visited if visited (duplication will not affect performance)\r\n      state.graphData.visited.forEach((v) => {\r\n        if (state.graphData.data[v].type === \"\") state.graphData.data[v].type = \"visited\";\r\n      });\r\n    } while (state.skip && (state.graphData.running || state.graphData.drawPath));\r\n  },\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport initialState from \"./initialState\";\r\nimport graphReducer from \"./reducers/graphReducer\";\r\nimport controlReducer from \"./reducers/controlReducers\";\r\nimport algoReducer from \"./reducers/algorithmReducers\";\r\n\r\nexport const graphSlice = createSlice({\r\n  name: \"graph\",\r\n  initialState: initialState,\r\n  reducers: { ...graphReducer, ...controlReducer, ...algoReducer },\r\n});\r\n\r\nexport const {\r\n  step,\r\n  solve,\r\n  generate,\r\n  reset,\r\n  pause,\r\n  resume,\r\n  clear,\r\n  generateMaze,\r\n  updateGraph,\r\n  toggleSkip,\r\n  setWeightCheck,\r\n  updateSpeed,\r\n  setIntervalId,\r\n  setAlgorithm,\r\n  toggleWall,\r\n  selectTile,\r\n  placeNode,\r\n} = graphSlice.actions;\r\n\r\nexport default graphSlice.reducer;\r\n","import React from \"react\";\r\nimport { FormControl, InputLabel, Select, Button, MenuItem } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { solve, reset, step, setAlgorithm, setIntervalId } from \"../../logic/redux/graphSlice\";\r\nimport { getSolverNames } from \"../../logic/AlgorithmManager\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport \"./SolveControl.css\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst solveHelper = (dispatch, delay, runSolver, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runSolver) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(step());\r\n  }, delay);\r\n  return intervalId;\r\n};\r\n\r\nconst SolveControl = (props) => {\r\n  const selectedSolver = useSelector((state) => state.graph.algorithms.solve);\r\n  const runSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.solve,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = solveHelper(dispatch, runSpeed, runSolver, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"solve\", value: intervalId }));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-solvers\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Solvers</InputLabel>\r\n        <Select\r\n          disabled={runSolver || runGenerator}\r\n          name=\"solvers\"\r\n          id=\"solvers\"\r\n          value={selectedSolver}\r\n          label=\"Solvers\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"solve\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getSolverNames())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        disabled={runSolver || runGenerator}\r\n        color=\"primary\"\r\n        // startIcon={<PlayArrowIcon/>}\r\n        startIcon={<SendIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(solve());\r\n        }}\r\n      >\r\n        Solve\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        startIcon={<RefreshIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolveControl;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getMazeGenerators } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Select, MenuItem, FormControl, InputLabel, Checkbox, FormControlLabel } from \"@material-ui/core\";\r\nimport { setAlgorithm, generateMaze, clear, generate, setIntervalId, reset, setWeightCheck } from \"../../logic/redux/graphSlice\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nimport \"./GeneratorControl.css\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst generateHelper = (dispatch, runGenerator, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runGenerator) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(generateMaze());\r\n  }, 10);\r\n  return intervalId;\r\n};\r\n\r\nexport default (props) => {\r\n  const currentGenerator = useSelector((state) => state.graph.algorithms.generate);\r\n  const isWeighted = useSelector((state) => state.graph.weightCheck);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.generate,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = generateHelper(dispatch, runGenerator, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"generate\", value: intervalId }));\r\n  return (\r\n    <div className=\"sub-section maze-generation\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Generators</InputLabel>\r\n        <Select\r\n          name=\"generators\"\r\n          disabled={runSolver || runGenerator}\r\n          id=\"generators\"\r\n          value={currentGenerator}\r\n          label=\"Generators\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"generate\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getMazeGenerators())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        disabled={runSolver || runGenerator}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<BuildIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n          dispatch(generate(isWeighted));\r\n        }}\r\n      >\r\n        Generate\r\n      </Button>\r\n      <FormControlLabel\r\n        id=\"weight-checkbox\"\r\n        control={\r\n          <Checkbox\r\n            id=\"weight-checkbox\"\r\n            value=\"weight\"\r\n            checked={isWeighted}\r\n            disabled={runGenerator}\r\n            onChange={(e, state) => dispatch(setWeightCheck(state))}\r\n          />\r\n        }\r\n        label=\"weighted\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./ControlsMenu.css\";\r\nimport { Slider, Button, Typography, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSpeed, pause, reset, clear, resume, toggleSkip } from \"../../logic/redux/graphSlice\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const paused = useSelector((state) => state.graph.paused);\r\n  const skip = useSelector((state) => state.graph.skip);\r\n  const solveSpeed = useSelector((state) => state.graph.solveSpeed);\r\n\r\n  let icon = paused ? <PlayArrowIcon /> : <PauseIcon />;\r\n\r\n  return (\r\n    <div className=\"sub-section controls-menu\">\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={icon}\r\n        onClick={(e) => {\r\n          if (paused) dispatch(resume());\r\n          else dispatch(pause());\r\n        }}\r\n      >\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        startIcon={<DeleteIcon />}\r\n        color=\"secondary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n        }}\r\n      >\r\n        Clear\r\n      </Button>\r\n      <div>\r\n        <Typography gutterBottom>Solve Speed</Typography>\r\n        <Slider\r\n          onChangeCommitted={(e, v) => dispatch(updateSpeed(1010 - v))} \r\n          defaultValue={1010 - solveSpeed}\r\n          step={50}\r\n          min={500}\r\n          max={1000}\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={(v) => 1010 - v}\r\n          marks\r\n        />\r\n      </div>\r\n      <FormControlLabel\r\n        className=\"skip-control\"\r\n        control={<Checkbox value=\"skip\" checked={skip} onChange={() => dispatch(toggleSkip())} />}\r\n        label=\"skip animation\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./TopMenu.css\";\r\nimport SolveControl from \"./SolveControl\";\r\nimport GeneratorControl from \"./GeneratorControl\";\r\nimport ControlsMenu from \"./ControlsMenu\";\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <GeneratorControl />\r\n\r\n      <SolveControl />\r\n      <ControlsMenu/>\r\n      </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Tile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleWall, selectTile } from \"../../logic/redux/graphSlice\";\r\nconst TILE = 25;\r\nconst getCurrentCSS = (type) => {\r\n  let cls = \"tile \";\r\n  switch (type) {\r\n    case \"start\":\r\n      return cls + \"tile-start\";\r\n    case \"goal\":\r\n      return cls + \"tile-goal\";\r\n    case \"start-s\":\r\n      return cls + \"tile-start selected\";\r\n    case \"goal-s\":\r\n      return cls + \"tile-goal selected\";\r\n    case \"visited\":\r\n      return cls + \"tile-visited\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    case \"path\":\r\n      return cls + \"tile-path\";\r\n    case \"wall\":\r\n      return cls + \"tile-wall\";\r\n    default:\r\n      return cls;\r\n  }\r\n};\r\n\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n  let cellState = useSelector(\r\n    (state) => state.graph.graphData.data[props.id],\r\n    (oldData, newData) => oldData.type === newData.type && oldData.value === newData.value\r\n  );\r\n  let weighted = useSelector(\r\n    (state) => state.graph.generationData.weighted,\r\n    () => true\r\n  );\r\n  let styles = { width: TILE, height: TILE };\r\n  return (\r\n    <td\r\n      id={props.id}\r\n      key={props.id}\r\n      className={getCurrentCSS(cellState.type)}\r\n      style={styles}\r\n      onMouseEnter={(e) => {\r\n        if (e.buttons === 1) dispatch(toggleWall(props.id));\r\n      }}\r\n      onPointerDown={(e) => {\r\n        if (cellState.type === \"start\" || cellState.type === \"goal\") dispatch(selectTile(props.id));\r\n        else dispatch(toggleWall(props.id));\r\n      }}\r\n    >\r\n      {weighted && (cellState.type === \"\" || cellState.type === \"visited\") && cellState.value !== -1\r\n        ? cellState.value\r\n        : undefined}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\nexport { TILE };\r\n","import React, { Component } from \"react\";\r\nimport \"./GraphArea.css\";\r\nimport Tile, { TILE } from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport { placeNode, updateGraph } from \"../../logic/redux/graphSlice\";\r\nimport { generateGraph } from \"../../logic/GraphLogic\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  let vertices = state.graph.graphData.vertices;\r\n  return { vertices };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    \r\n    placeNode: (vertex) => dispatch(placeNode(vertex)),\r\n    updateGraph: (nx, ny) => {\r\n      updateGraph(generateGraph(nx, ny));\r\n    },\r\n  };\r\n};\r\n\r\nclass GraphArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { rows: 0, columns: 0 };\r\n  }\r\n  componentDidMount() {\r\n    this.updateSizes();\r\n  }\r\n\r\n  updateSizes = () => {\r\n    let graphArea = document.getElementById(\"graph-area2\");\r\n    let graphW = graphArea.clientWidth;\r\n    let graphH = graphArea.clientHeight;\r\n    let l = TILE + 2; //+2 for border\r\n    let columns = Math.floor(graphW / l);\r\n    let rows = Math.floor(graphH / l);\r\n    let tileW = graphW / columns - 2;\r\n    let tileH = graphH / rows - 2;\r\n    this.setState({ graphW, graphH, columns, rows, tileW, tileH });\r\n    this.props.onLoad(columns, rows);\r\n    this.props.updateGraph(columns, rows);\r\n    this.props.placeNode({ type: \"start\", id: columns * Math.floor(rows / 2) + Math.floor(columns / 4) });\r\n    this.props.placeNode({ type: \"goal\", id: columns * Math.floor(rows / 2) + Math.floor((3 * columns) / 4) });\r\n  };\r\n\r\n  getTiles = () => {\r\n    let tiles = [];\r\n    this.props.vertices.forEach((v) => {});\r\n    for (let r = 0; r < Math.floor(this.props.vertices.length / this.state.columns); r++) {\r\n      let cells = [];\r\n      for (let c = 0; c < Math.floor(this.props.vertices.length / this.state.rows); c++) {\r\n        let id = this.state.columns * r + c;\r\n        cells.push(<Tile id={id} key={id} />);\r\n      }\r\n      tiles.push(<tr key={\"row-\" + r}>{cells}</tr>);\r\n    }\r\n    return tiles;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-area\" id=\"graph-area2\" onContextMenu={(e) => e.preventDefault()}>\r\n        <table>\r\n          <tbody>{this.getTiles()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphArea);\r\n","import React from \"react\";\r\nimport \"./Legend.css\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\n\r\nexport default function () {\r\n  return (\r\n    <div className=\"legend-wrapper\">\r\n      <ul className=\"sub-section legend\">\r\n        <li>\r\n          <p>Start</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-start\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Goal</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-goal\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Wall</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-wall\"></div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TopMenu from \"./components/TopMenu/TopMenu\";\r\nimport \"./App.css\";\r\nimport GraphArea from \"./components/GraphArea/GraphArea\";\r\nimport { generateGraph } from \"./logic/GraphLogic\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateGraph } from \"./logic/redux/graphSlice\";\r\nimport Legend from \"./components/LegendArea/Legend\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n      <TopMenu />\r\n      <GraphArea onLoad={(nx, ny) => dispatch(updateGraph(generateGraph(nx, ny)))} />\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"./graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./logic/redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}